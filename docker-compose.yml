version: '3.8'

services:
  # PostgreSQL with PostGIS
  postgres:
    image: postgis/postgis:15-3.4
    container_name: auction-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - auction-network

  # Redis for caching and message queue
  redis:
    image: redis:7-alpine
    container_name: auction-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - auction-network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: auction-qdrant
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    environment:
      QDRANT__SERVICE__GRPC_PORT: 6334
    healthcheck:
      test: ["CMD-SHELL", "timeout 5 bash -c '</dev/tcp/localhost/6333' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - auction-network

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: auction-backend
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379/0
      QDRANT_URL: http://qdrant:6333
    volumes:
      - ./backend/src:/app/src
      - ./scripts:/app/scripts
      - ./config.yaml:/app/config/config.yaml
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 5 &&
        alembic upgrade head &&
        uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - auction-network

  # NLP Service
  nlp-service:
    build:
      context: ./nlp-service
      dockerfile: Dockerfile
    container_name: auction-nlp
    env_file:
      - .env
    environment:
      QDRANT_URL: http://qdrant:6333
      REDIS_URL: redis://redis:6379/0
    volumes:
      - ./nlp-service/src:/app/src
      - ./nlp-service/models:/app/models
      - ./config.yaml:/app/config/config.yaml
    ports:
      - "8001:8001"
    depends_on:
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    command: uvicorn src.main:app --host 0.0.0.0 --port 8001 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - auction-network

  # Scraper Service
  scraper:
    build:
      context: ./scraper
      dockerfile: Dockerfile
    container_name: auction-scraper
    env_file:
      - .env
    environment:
      REDIS_URL: redis://redis:6379/0
      NLP_SERVICE_URL: http://nlp-service:8001
      BACKEND_API_URL: http://backend:8000
    volumes:
      - ./scraper/src:/app/src
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
      nlp-service:
        condition: service_healthy
    command: python -m src.pvp_scraper
    restart: unless-stopped
    networks:
      - auction-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL}
        REACT_APP_WS_URL: ${REACT_APP_WS_URL}
    container_name: auction-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 15s
      timeout: 5s
      retries: 3
    networks:
      - auction-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local

networks:
  auction-network:
    driver: bridge
