name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  lint-and-test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgis/postgis:15-3.3-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt
      
      - name: Run Black formatter check
        run: |
          cd backend
          black --check src/
      
      - name: Run Flake8 linter
        run: |
          cd backend
          flake8 src/ --max-line-length=100 --exclude=migrations
      
      - name: Run MyPy type checker
        run: |
          cd backend
          mypy src/ --ignore-missing-imports
        continue-on-error: true
      
      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET_KEY: test_secret_key_for_ci_only
          POSTGRES_PASSWORD: test_pass
          ADMIN_PASSWORD: test_admin
        run: |
          cd backend
          pytest tests/ --cov=src --cov-report=xml --cov-report=html -v
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage.xml
          flags: backend

  lint-and-test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run ESLint
        run: |
          cd frontend
          npm run lint
        continue-on-error: true
      
      - name: Run TypeScript check
        run: |
          cd frontend
          npm run type-check
        continue-on-error: true
      
      - name: Build frontend
        run: |
          cd frontend
          npm run build

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Bandit security linter (Python)
        run: |
          pip install bandit
          bandit -r backend/src scraper/src nlp-service/src -f json -o bandit-report.json
        continue-on-error: true

  build-and-push-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint-and-test-backend, lint-and-test-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [backend, frontend, scraper, nlp-service]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
          tags: |
            type=sha,prefix={{branch}}-
            type=ref,event=branch
            type=semver,pattern={{version}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-test-backend]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Create .env file
        run: |
          cp .env.example .env
          sed -i 's/change_me_in_production/test_password_123/g' .env
          sed -i 's/change_me_to_random_32_char_string_minimum/test_jwt_secret_key_for_ci_testing_only/g' .env
          sed -i 's/change_me_admin_password/test_admin_pass_123/g' .env
      
      - name: Start services with Docker Compose
        run: |
          docker-compose up -d --build
          sleep 30
      
      - name: Check service health
        run: |
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:3000 || exit 1
      
      - name: Run integration tests
        run: |
          docker-compose exec -T backend pytest tests/test_integration.py -v
      
      - name: Show logs on failure
        if: failure()
        run: |
          docker-compose logs backend
          docker-compose logs scraper
          docker-compose logs nlp-service
      
      - name: Cleanup
        if: always()
        run: docker-compose down -v

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push-images, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.auction-analyzer.com
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Kubernetes (staging)
        run: |
          echo "Deployment step - configure with your K8s cluster"
          # kubectl apply -f infra/kubernetes/ -n staging
